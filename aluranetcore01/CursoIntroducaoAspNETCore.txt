Transformar meu terminal em um servidor http. criar um objeto que vai hospedar todos os pedidos da aplicação. IWebHost
WebHost objeto que hospeda todos os pedidos 

Atualizar vscode extensions nuget package manager e nuget extensions 

nuget package install Microsoft.AspNetCore -Version 2.0.1
servidor web adotado pela sua aplicação, que no caso será o Kestrel,usamos o padrao BUILDER

Precisa de uma classe de inicializacao e Metodo Configure 

httpContext  -Um objeto desta classe é passado como 
argumento de entrada do delegate RequestDelegate

public delegate Task RequestDelegate(HttpContext context)
Interessante que o compilador ignora quando é utilizado o modificador de acesso para validar o uso de um delegate

Conceito de Request Pipeline 
Termo usado pelo ASP.NET Core para representar o fluxo que uma requisição HTTP percorre dentro de sua aplicação até que a resposta seja entregue ao cliente.

Outra dica é configura classe de inicializacao e de configuracao de acordo com ambiente 
Por convenção, o ASP.NET Core permite que você configure o ambiente de desenvolvimento através de um método ConfigureDevelopment(). O mesmo pode ser feito para o ambiente de produção com ConfigureProduction() e o de testes com ConfigureStaging().
E mais: é possível criar classes específicas para cada ambiente. Como? Usando os nomes StartupDevelopment, StartupStaging e StartupProduction
https://docs.microsoft.com/pt-br/aspnet/core/fundamentals/environments?view=aspnetcore-2.2

--TRATAR ENDERECO POR ROTEAMENTO
Como fazer distinção de código por endereço de roteamento
Dentro da classe Startup 

Modificar o Codigo de Retorno = context.Response.StatusCode = 404;

Trabalhar com metodo RequestDelegate.... Uso do Metodo Invoke para poder chamara delegate
RequestDelegate metodo 
return metodo.Invoke(context);
Objetos HttpRequest e HttpResponse 
https://docs.microsoft.com/pt-br/dotnet/api/microsoft.aspnetcore.http.httprequest?view=aspnetcore-2.2

Roteamento
criando expressões regulares que se adequem aos caminhos que tiver que atender? Na verdade toda essa lógica já foi criada e pensada para nós no framework AspNet.Core e está disponível no pacote Routing
RouteBuilder
var routeBuilder = new RouteBuilder(app);
routeBuilder.MapRoute("/livros/paraler", LivrosParaLer)
app.useRouter(rotas);
e necessário que o service que esta configurado no Configuration Services

Roteamento Templte -> Poderia {nome}/{autor} e depois capturar httpContext -> Titulo = Convert.ToString(context.GetRouteValue("nome")),
        Autor = Convert.ToString(context.GetRouteValue("autor")
