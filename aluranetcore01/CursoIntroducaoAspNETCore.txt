Transformar meu terminal em um servidor http. criar um objeto que vai hospedar todos os pedidos da aplicação. IWebHost
WebHost objeto que hospeda todos os pedidos 

Atualizar vscode extensions nuget package manager e nuget extensions 

nuget package install Microsoft.AspNetCore -Version 2.0.1
servidor web adotado pela sua aplicação, que no caso será o Kestrel,usamos o padrao BUILDER

Precisa de uma classe de inicializacao e Metodo Configure 

httpContext  -Um objeto desta classe é passado como 
argumento de entrada do delegate RequestDelegate

public delegate Task RequestDelegate(HttpContext context)
Interessante que o compilador ignora quando é utilizado o modificador de acesso para validar o uso de um delegate

Conceito de Request Pipeline 
Termo usado pelo ASP.NET Core para representar o fluxo que uma requisição HTTP percorre dentro de sua aplicação até que a resposta seja entregue ao cliente.

Outra dica é configura classe de inicializacao e de configuracao de acordo com ambiente 
Por convenção, o ASP.NET Core permite que você configure o ambiente de desenvolvimento através de um método ConfigureDevelopment(). O mesmo pode ser feito para o ambiente de produção com ConfigureProduction() e o de testes com ConfigureStaging().
E mais: é possível criar classes específicas para cada ambiente. Como? Usando os nomes StartupDevelopment, StartupStaging e StartupProduction
https://docs.microsoft.com/pt-br/aspnet/core/fundamentals/environments?view=aspnetcore-2.2

--TRATAR ENDERECO POR ROTEAMENTO
Como fazer distinção de código por endereço de roteamento
Dentro da classe Startup 

Modificar o Codigo de Retorno = context.Response.StatusCode = 404;

Trabalhar com metodo RequestDelegate.... Uso do Metodo Invoke para poder chamara delegate
RequestDelegate metodo 
return metodo.Invoke(context);
Objetos HttpRequest e HttpResponse 
https://docs.microsoft.com/pt-br/dotnet/api/microsoft.aspnetcore.http.httprequest?view=aspnetcore-2.2

Roteamento
https://docs.microsoft.com/pt-br/aspnet/core/fundamentals/routing?view=aspnetcore-2.2
criando expressões regulares que se adequem aos caminhos que tiver que atender? Na verdade toda essa lógica já foi criada e pensada para nós no framework AspNet.Core e está disponível no pacote Routing
RouteBuilder
var routeBuilder = new RouteBuilder(app);
routeBuilder.MapRoute("/livros/paraler", LivrosParaLer)
app.useRouter(rotas);
e necessário que o service que esta configurado no Configuration Services

Roteamento Templte -> Poderia {nome}/{autor} e depois capturar httpContext -> Titulo = Convert.ToString(context.GetRouteValue("nome")),
        Autor = Convert.ToString(context.GetRouteValue("autor")

Constraint nos parametros para ja não deixar chegar no manipulador
Na documentação sobre o roteamento no Asp.NET também temos a possibilidade de adicionar restrições às rotas mapeadas. São as chamadas Route Constraints. As restrições limitam o mapeamento e fazem com que o ASP.NET só execute determinado request delegate se a restrição for atendida.
No nosso caso, queremos que apenas valores do tipo inteiro sejam atendidos na rota de exibição de detalhes. Para implementar essa restrição modificamos o mapeamento da rota assim:
Livros/Detalhes/{id:int}

Fazer passar por Get QueryString 
Como a query string faz parte da requisição, é lá que vamos procurar uma propriedade chamada Query, que é do tipo IQueryCollection
Cada chave pode receber uma lista de valores .. logo deve o First() para obter o primeiro valor por chave

a lógica de atendimento das requisições é a parte Controller, pois é nela que as requisições são controladas
as classes de negócio estão na parte Model, pois elas modelam a aplicação
classes e arquivos para tratar do HTML se encontram na parte View, porque elas se tornarão a parte que o usuário irá ver

ASP.NET MVC 
Install-Package Microsoft.AspNetCore.Mvc -Version 2.0.2
services.AddRouting();
    services.AddMvc();
    roteamento padrao UseMvcWithDefaultRoutes()

    Ele estabeleceu um estágio que acontece antes da execução do método no request pipeline chamado Model Binding

    o estágio de Model Binding irá procurar por informações referentes a um livro (título e autor) em três fontes: no formulário, na rota e na query string.

    PROCESSO DE MVC 
    Quando adiciono o serviço MVC, dentro do método de extensão AddMvc() ele automaticamente adiciona os serviços dos quais depende, e um deles é o serviço de roteamento. Portanto não precisamos mais adicioná-lo na mão e vou removê-lo do meu código.

    Ela é escrita pelo framework. Ou seja, existe mais um estágio depois da execução da action, e ele é chamado Execute Result. Quando retornamos uma string, esse estágio entende que queremos mandar um texto puro como resposta e faz isso. Veja o content-type da resposta: text/plain.
    O framework escreve a resposta .. e nao mais a gente IAciontResult... 
    ViewResult e a implementacao de HTML .. Ao usar a implementacao do ViewResult por convencao ira trabalhar com cshtml e nao html .. como extensao

    Onde habilito essa funcionaldade? Na classe de inicialização, Startup. Vou no método Configure() e chamo o método UseDeveloperExceptionPage(), que vai mostrar uma página bonitinha com as informações do erro. Então vou subir o servidor e verificar o erro.

Veja que a página informa que não foi possível encontrar formulario.html.

Repara que o framework procura especificamente em uma pasta chamada Views, e dentro dela em uma subpasta com o nome de nosso controlador! E gente, isso é uma regra do framework, tá? Então vamos nos adequar a essas regras. Vou renomear a pasta HTML para Views, e criar uma subpasta Cadastro dentro dela, movendo o arquivo pra lá. Agora acho que vai achar. Ops, mesmo erro. Estranho. Peraí, olha aqui. Ele está buscando um arquivo com extensão CSHTML

Erro de Reportar o BUG DO ASP.NET CORE 
An error occurred during the compilation of a resource required to process this request. Please review the following specific error details and modify your source code appropriately.
Generated Code
One or more compilation references are missing. Ensure that your project is referencing 'Microsoft.NET.Sdk.Web' and the 'PreserveCompilationContext' property is not set to false.

Fazer o seguinte procedimento no CSPROJ
<PropertyGroup>
 <OutputType>Exe</OutputType>
 <TargetFramework>netcoreapp2.0</TargetFramework>
 <PreserveCompilationContext>true</PreserveCompilationContext>
</PropertyGroup>

PRE COMPILACAO DE VIEWS 
PreserveCompilationContext é uma configuração exigida para compilar as views. Quando ela está habilitada indicamos que nossas views serão compiladas em tempo de execução. Ela pode ser desligada e usada em conjunto com outras opções para pré-compilar as views e assim diminuir o tempo de espera do usuário ao solicitar aquela view específica.
ramework delegou a responsabilidade para uma entidade específica chamada View Engine, ou seja, um motor que se encarrega de juntar o HTML com o código necessário para tornar a página dinâmica. Cada view engine tem suas próprias regras e padronizações.
E quem é a view engine padrão? Uma implementação chamada Razor. Quais são suas regras? As views devem ter extensão cshtml, e você pode escrever código C# dentro do arquivo. Eita, como assim? Isso mesmo, vc pode colocar código csharp dentro da view

Como trabalhar com razor 
@foreach (var livro in livros)
{
    <li>@livro.Titulo - @livro.Autor</li>
}

Uso do ViewBag atraves da classe base Controller e ela é instancia pelos metodos da classe pai

RESUMO DO MVC
A pasta Controllers estão os controladores de nossa aplicação. O nome de um controlador termina com o sufixo Controller e herda da classe base Controller. Seus métodos são actions e retornam implementações de IActionResult.

Para gerar as views temos uma estrutura de pastas que começa em Views e subpastas respectivas aos prefixos dos nomes dos controladores. Dentro de cada subpasta temos arquivos com extensão cshtml e neste projeto aqui existe uma correspondência entre a action e a view.

Na pasta Models estão os modelos da aplicação.

A classe de inicialização da aplicação. Ela possui os métodos ConfigureServices(), que adiciona o serviço MVC, e o método Configure(), que além de outras coisas define o roteamento padrão do framework MVC.

A classe Program tem o código que sobe o host a partir das configurações do hospedeiro web (usando Kestrel e classe de inicialização Startup).
